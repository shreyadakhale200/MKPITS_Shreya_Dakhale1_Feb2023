select * from customerInfo

insert into customerInfo values(3001,'BRad Guzan','London',null,5005)

select * from customerInfo

select * from salesman
select * from customerInfo

create table Orders(
ord_no bigint not null primary key,
purch_amt dec(10,2),
ord_date date,
customer_id int not null,
salesman_id int					--foreign key
constraint s1 foreign key(salesman_id) references salesman(salesman_id)
)
drop table Orders
--ALTER TABLE Orders
--alter COLUMN ord_no BIGINT
--ADD PRIMARY KEY (employee_id);

insert into Orders values(70001,150.5,'2012-10-05',3005,5002),
(70009,270.65,'2012-09-10',3001,5005),
(70002,65.26,'2012-10-05',3002,5001),
(70004,110.5,'2012-08-17',3009,5003),
(70007,948.5,'2012-09-10',3005,5002),
(70005,2400.6,'2012-07-27',3007,5001),
(70008,5760,'2012-09-10',3002,5001),
(70010,1983.43,'2012-10-10',3004,5006),
(70003,2480.4,'2012-10-10',3004,5006),
(70012,250.45,'2012-06-27',3008,5002),
(70011,75.29,'2012-08-17',3003,5007),
(70013,3045.6,'2012-05-25',3002,5001)

select * from Orders
select * from salesman
select * from sale
--From the following tables, write a SQL query to find all the orders issued by the salesman 'Paul Adam'.
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select o.ord_no,o.purch_amt,o.ord_date,o.customer_id,o.salesman_id from salesman s inner join Orders o on s.salesman_id = o.salesman_id
where name = 'Paul Adam'

SELECT *
FROM Orders
WHERE salesman_id in(
  SELECT salesman_id
  FROM salesman
  WHERE name = 'Paul Adam'
);

--From the following tables write a SQL query to find all orders generated by London-based
--salespeople. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
select * from salesman
select * from Orders

select o.ord_no,o.purch_amt,o.ord_date,o.customer_id,o.salesman_id from Orders o inner join salesman s on
o.salesman_id = s.salesman_id where city = 'London'

select * from Orders where salesman_id in (select salesman_id from salesman where city = 'London')

--3. From the following tables write a SQL query to find all orders generated by the salespeople who may
--work for customers whose id is 3007. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.

select * from Orders where salesman_id = (select salesman_id from Orders where customer_id = 3007)

--ALTER table Orders
--ALTER column ord_no bigint;

--From the following tables write a SQL query to find the order values greater than the average order
--value of 10th October 2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
select * from Orders where purch_amt > (select avg(purch_amt) from Orders where ord_date = '2012-10-10')

select * from Orders

--5. From the following tables, write a SQL query to find all the orders generated in New York city. Return
--ord_no, purch_amt, ord_date, customer_id and salesman_id.

select * from salesman
select * from Orders

select * from Orders where salesman_id = (select salesman_id from salesman where city = 'New York')

--6. From the following tables write a SQL query to determine the commission of the salespeople in Paris.
--Return commission.
select commision from salesman where salesman_id in (select salesman_id from customerInfo where city = 'Paris')

select * from customerInfo
select * from salesman

--7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.
															--		^
															--subtract
select * from salesman
select * from customerInfo
select * from customerInfo where customerid = (select salesman_id-2001 from salesman where name = 'Mc Lyon')

--8. From the following tables write a SQL query to count the number of customers with grades above the
--average in New York City. Return grade and count.

--update customerInfo set cust_name = 'Brad Guzan' where cust_name = 'BRad Guzan'
select grade,count(*) as 'Count' from customerInfo group by grade having grade > 
(select avg(grade) from customerInfo where city = 'New York') 
select * from customerInfo

--HAVING clause is used after the aggregate or group by is performed
--WHERE clause is used before the aggregate or group by is performed

--9. From the following tables, write a SQL query to find those salespeople who earned the maximum
--commission. Return ord_no, purch_amt, ord_date, and salesman_id.
--Sample table: Salesman
--Sample table: Customer
--Sample table: Orders
select * from Orders
select * from salesman
select * from customerInfo

select * from Orders where salesman_id in (select salesman_id from customerInfo where salesman_id in 
(select salesman_id from salesman where commision = (select max(commision)from salesman)))

--10. From the following tables write SQL query to find the customers who placed orders on 17th August
--2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.
--Sample table: Orders
--Sample table: Customer

select * from Orders
select * from customerInfo

select o.*,c.cust_name from Orders o,customerInfo c where c.salesman_id = o.salesman_id and o.ord_date = '2012-08-17' 

SELECT o.*, c.cust_name 
FROM Orders o 
FULL JOIN customerInfo c 
ON o.customer_id = c.customerid
WHERE o.ord_date = '2012-08-17';

--11. From the following tables write a SQL query to find salespeople who had more than one customer.
--Return salesman_id and name.
--Sample table: customer
--Sample table: salesman

select salesman_id,name from salesman a where 1 < (select count(customerid) from customerInfo where salesman_id = a.salesman_id)
select * from customerInfo
select * from salesman

--12. From the following tables write a SQL query to find those orders, which are higher than the average
--amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select * from Orders
select * from customerInfo
select * from Orders a where purch_amt > (select avg(purch_amt) from Orders b where a.customer_id = b.customer_id )

--13. From the following tables write a SQL query to find those orders that are equal or higher than the
--average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select * from Orders
select * from Orders a where purch_amt >= (select avg(purch_amt) from Orders b where a.customer_id = b.customer_id)

--14. Write a query to find the sums of the amounts from the orders table, grouped by date, and eliminate
--all dates where the sum was not at least 1000.00 above the maximum order amount for that date.
										--	1000.00 + max(purch_amt)
select * from Orders 
select * from customerInfo

select sum(purch_amt),ord_date from Orders a group by ord_date having sum(purch_amt) 
> (select 1000.0 + max(purch_amt)from Orders b where a.ord_date = b.ord_date )

--chatgpt--
SELECT  SUM(purch_amt), ord_date as total_amount
FROM orders
GROUP BY ord_date
HAVING SUM(purch_amt) - (SELECT MAX(purch_amt) FROM orders o WHERE o.ord_date = orders.ord_date) >= 1000.00;

--15. Write a query to extract all data from the customer table if and only if one or more of the customers in
--the customer table are located in London.
select customerid,cust_name,city from customerInfo a where 1 <= 
(select count(cust_name) from customerInfo b where a.cust_name = b.cust_name or city = 'London')

SELECT customerid,cust_name, city
FROM customerInfo
WHERE EXISTS
(SELECT *
FROM customerInfo
WHERE city='London');

select * from customerInfo

--16. From the following tables write a SQL query to find salespeople who deal with multiple customers.
--Return salesman_id, name, city and commission.
select * from customerInfo where 1 < (select count(
select * from salesman